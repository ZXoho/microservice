/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cn.thrift.role;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-01-26")
public class Role implements org.apache.thrift.TBase<Role, Role._Fields>, java.io.Serializable, Cloneable, Comparable<Role> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Role");

  private static final org.apache.thrift.protocol.TField ROLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("roleId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("companyId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField ROLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("roleName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField ROLE_PERMISSION_FIELD_DESC = new org.apache.thrift.protocol.TField("rolePermission", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField ROLE_PHONE_FIELD_DESC = new org.apache.thrift.protocol.TField("rolePhone", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField ROLE_PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("rolePassword", org.apache.thrift.protocol.TType.STRING, (short)6);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new RoleStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new RoleTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String roleId; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String companyId; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String roleName; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String rolePermission; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String rolePhone; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String rolePassword; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ROLE_ID((short)1, "roleId"),
    COMPANY_ID((short)2, "companyId"),
    ROLE_NAME((short)3, "roleName"),
    ROLE_PERMISSION((short)4, "rolePermission"),
    ROLE_PHONE((short)5, "rolePhone"),
    ROLE_PASSWORD((short)6, "rolePassword");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ROLE_ID
          return ROLE_ID;
        case 2: // COMPANY_ID
          return COMPANY_ID;
        case 3: // ROLE_NAME
          return ROLE_NAME;
        case 4: // ROLE_PERMISSION
          return ROLE_PERMISSION;
        case 5: // ROLE_PHONE
          return ROLE_PHONE;
        case 6: // ROLE_PASSWORD
          return ROLE_PASSWORD;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ROLE_ID, new org.apache.thrift.meta_data.FieldMetaData("roleId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("companyId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ROLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("roleName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ROLE_PERMISSION, new org.apache.thrift.meta_data.FieldMetaData("rolePermission", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ROLE_PHONE, new org.apache.thrift.meta_data.FieldMetaData("rolePhone", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ROLE_PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("rolePassword", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Role.class, metaDataMap);
  }

  public Role() {
  }

  public Role(
    java.lang.String roleId,
    java.lang.String companyId,
    java.lang.String roleName,
    java.lang.String rolePermission,
    java.lang.String rolePhone,
    java.lang.String rolePassword)
  {
    this();
    this.roleId = roleId;
    this.companyId = companyId;
    this.roleName = roleName;
    this.rolePermission = rolePermission;
    this.rolePhone = rolePhone;
    this.rolePassword = rolePassword;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Role(Role other) {
    if (other.isSetRoleId()) {
      this.roleId = other.roleId;
    }
    if (other.isSetCompanyId()) {
      this.companyId = other.companyId;
    }
    if (other.isSetRoleName()) {
      this.roleName = other.roleName;
    }
    if (other.isSetRolePermission()) {
      this.rolePermission = other.rolePermission;
    }
    if (other.isSetRolePhone()) {
      this.rolePhone = other.rolePhone;
    }
    if (other.isSetRolePassword()) {
      this.rolePassword = other.rolePassword;
    }
  }

  public Role deepCopy() {
    return new Role(this);
  }

  @Override
  public void clear() {
    this.roleId = null;
    this.companyId = null;
    this.roleName = null;
    this.rolePermission = null;
    this.rolePhone = null;
    this.rolePassword = null;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getRoleId() {
    return this.roleId;
  }

  public Role setRoleId(@org.apache.thrift.annotation.Nullable java.lang.String roleId) {
    this.roleId = roleId;
    return this;
  }

  public void unsetRoleId() {
    this.roleId = null;
  }

  /** Returns true if field roleId is set (has been assigned a value) and false otherwise */
  public boolean isSetRoleId() {
    return this.roleId != null;
  }

  public void setRoleIdIsSet(boolean value) {
    if (!value) {
      this.roleId = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getCompanyId() {
    return this.companyId;
  }

  public Role setCompanyId(@org.apache.thrift.annotation.Nullable java.lang.String companyId) {
    this.companyId = companyId;
    return this;
  }

  public void unsetCompanyId() {
    this.companyId = null;
  }

  /** Returns true if field companyId is set (has been assigned a value) and false otherwise */
  public boolean isSetCompanyId() {
    return this.companyId != null;
  }

  public void setCompanyIdIsSet(boolean value) {
    if (!value) {
      this.companyId = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getRoleName() {
    return this.roleName;
  }

  public Role setRoleName(@org.apache.thrift.annotation.Nullable java.lang.String roleName) {
    this.roleName = roleName;
    return this;
  }

  public void unsetRoleName() {
    this.roleName = null;
  }

  /** Returns true if field roleName is set (has been assigned a value) and false otherwise */
  public boolean isSetRoleName() {
    return this.roleName != null;
  }

  public void setRoleNameIsSet(boolean value) {
    if (!value) {
      this.roleName = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getRolePermission() {
    return this.rolePermission;
  }

  public Role setRolePermission(@org.apache.thrift.annotation.Nullable java.lang.String rolePermission) {
    this.rolePermission = rolePermission;
    return this;
  }

  public void unsetRolePermission() {
    this.rolePermission = null;
  }

  /** Returns true if field rolePermission is set (has been assigned a value) and false otherwise */
  public boolean isSetRolePermission() {
    return this.rolePermission != null;
  }

  public void setRolePermissionIsSet(boolean value) {
    if (!value) {
      this.rolePermission = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getRolePhone() {
    return this.rolePhone;
  }

  public Role setRolePhone(@org.apache.thrift.annotation.Nullable java.lang.String rolePhone) {
    this.rolePhone = rolePhone;
    return this;
  }

  public void unsetRolePhone() {
    this.rolePhone = null;
  }

  /** Returns true if field rolePhone is set (has been assigned a value) and false otherwise */
  public boolean isSetRolePhone() {
    return this.rolePhone != null;
  }

  public void setRolePhoneIsSet(boolean value) {
    if (!value) {
      this.rolePhone = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getRolePassword() {
    return this.rolePassword;
  }

  public Role setRolePassword(@org.apache.thrift.annotation.Nullable java.lang.String rolePassword) {
    this.rolePassword = rolePassword;
    return this;
  }

  public void unsetRolePassword() {
    this.rolePassword = null;
  }

  /** Returns true if field rolePassword is set (has been assigned a value) and false otherwise */
  public boolean isSetRolePassword() {
    return this.rolePassword != null;
  }

  public void setRolePasswordIsSet(boolean value) {
    if (!value) {
      this.rolePassword = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case ROLE_ID:
      if (value == null) {
        unsetRoleId();
      } else {
        setRoleId((java.lang.String)value);
      }
      break;

    case COMPANY_ID:
      if (value == null) {
        unsetCompanyId();
      } else {
        setCompanyId((java.lang.String)value);
      }
      break;

    case ROLE_NAME:
      if (value == null) {
        unsetRoleName();
      } else {
        setRoleName((java.lang.String)value);
      }
      break;

    case ROLE_PERMISSION:
      if (value == null) {
        unsetRolePermission();
      } else {
        setRolePermission((java.lang.String)value);
      }
      break;

    case ROLE_PHONE:
      if (value == null) {
        unsetRolePhone();
      } else {
        setRolePhone((java.lang.String)value);
      }
      break;

    case ROLE_PASSWORD:
      if (value == null) {
        unsetRolePassword();
      } else {
        setRolePassword((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ROLE_ID:
      return getRoleId();

    case COMPANY_ID:
      return getCompanyId();

    case ROLE_NAME:
      return getRoleName();

    case ROLE_PERMISSION:
      return getRolePermission();

    case ROLE_PHONE:
      return getRolePhone();

    case ROLE_PASSWORD:
      return getRolePassword();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ROLE_ID:
      return isSetRoleId();
    case COMPANY_ID:
      return isSetCompanyId();
    case ROLE_NAME:
      return isSetRoleName();
    case ROLE_PERMISSION:
      return isSetRolePermission();
    case ROLE_PHONE:
      return isSetRolePhone();
    case ROLE_PASSWORD:
      return isSetRolePassword();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof Role)
      return this.equals((Role)that);
    return false;
  }

  public boolean equals(Role that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_roleId = true && this.isSetRoleId();
    boolean that_present_roleId = true && that.isSetRoleId();
    if (this_present_roleId || that_present_roleId) {
      if (!(this_present_roleId && that_present_roleId))
        return false;
      if (!this.roleId.equals(that.roleId))
        return false;
    }

    boolean this_present_companyId = true && this.isSetCompanyId();
    boolean that_present_companyId = true && that.isSetCompanyId();
    if (this_present_companyId || that_present_companyId) {
      if (!(this_present_companyId && that_present_companyId))
        return false;
      if (!this.companyId.equals(that.companyId))
        return false;
    }

    boolean this_present_roleName = true && this.isSetRoleName();
    boolean that_present_roleName = true && that.isSetRoleName();
    if (this_present_roleName || that_present_roleName) {
      if (!(this_present_roleName && that_present_roleName))
        return false;
      if (!this.roleName.equals(that.roleName))
        return false;
    }

    boolean this_present_rolePermission = true && this.isSetRolePermission();
    boolean that_present_rolePermission = true && that.isSetRolePermission();
    if (this_present_rolePermission || that_present_rolePermission) {
      if (!(this_present_rolePermission && that_present_rolePermission))
        return false;
      if (!this.rolePermission.equals(that.rolePermission))
        return false;
    }

    boolean this_present_rolePhone = true && this.isSetRolePhone();
    boolean that_present_rolePhone = true && that.isSetRolePhone();
    if (this_present_rolePhone || that_present_rolePhone) {
      if (!(this_present_rolePhone && that_present_rolePhone))
        return false;
      if (!this.rolePhone.equals(that.rolePhone))
        return false;
    }

    boolean this_present_rolePassword = true && this.isSetRolePassword();
    boolean that_present_rolePassword = true && that.isSetRolePassword();
    if (this_present_rolePassword || that_present_rolePassword) {
      if (!(this_present_rolePassword && that_present_rolePassword))
        return false;
      if (!this.rolePassword.equals(that.rolePassword))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetRoleId()) ? 131071 : 524287);
    if (isSetRoleId())
      hashCode = hashCode * 8191 + roleId.hashCode();

    hashCode = hashCode * 8191 + ((isSetCompanyId()) ? 131071 : 524287);
    if (isSetCompanyId())
      hashCode = hashCode * 8191 + companyId.hashCode();

    hashCode = hashCode * 8191 + ((isSetRoleName()) ? 131071 : 524287);
    if (isSetRoleName())
      hashCode = hashCode * 8191 + roleName.hashCode();

    hashCode = hashCode * 8191 + ((isSetRolePermission()) ? 131071 : 524287);
    if (isSetRolePermission())
      hashCode = hashCode * 8191 + rolePermission.hashCode();

    hashCode = hashCode * 8191 + ((isSetRolePhone()) ? 131071 : 524287);
    if (isSetRolePhone())
      hashCode = hashCode * 8191 + rolePhone.hashCode();

    hashCode = hashCode * 8191 + ((isSetRolePassword()) ? 131071 : 524287);
    if (isSetRolePassword())
      hashCode = hashCode * 8191 + rolePassword.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(Role other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetRoleId()).compareTo(other.isSetRoleId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRoleId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.roleId, other.roleId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCompanyId()).compareTo(other.isSetCompanyId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompanyId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyId, other.companyId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRoleName()).compareTo(other.isSetRoleName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRoleName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.roleName, other.roleName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRolePermission()).compareTo(other.isSetRolePermission());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRolePermission()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rolePermission, other.rolePermission);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRolePhone()).compareTo(other.isSetRolePhone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRolePhone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rolePhone, other.rolePhone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRolePassword()).compareTo(other.isSetRolePassword());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRolePassword()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rolePassword, other.rolePassword);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("Role(");
    boolean first = true;

    sb.append("roleId:");
    if (this.roleId == null) {
      sb.append("null");
    } else {
      sb.append(this.roleId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("companyId:");
    if (this.companyId == null) {
      sb.append("null");
    } else {
      sb.append(this.companyId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("roleName:");
    if (this.roleName == null) {
      sb.append("null");
    } else {
      sb.append(this.roleName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("rolePermission:");
    if (this.rolePermission == null) {
      sb.append("null");
    } else {
      sb.append(this.rolePermission);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("rolePhone:");
    if (this.rolePhone == null) {
      sb.append("null");
    } else {
      sb.append(this.rolePhone);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("rolePassword:");
    if (this.rolePassword == null) {
      sb.append("null");
    } else {
      sb.append(this.rolePassword);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RoleStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public RoleStandardScheme getScheme() {
      return new RoleStandardScheme();
    }
  }

  private static class RoleStandardScheme extends org.apache.thrift.scheme.StandardScheme<Role> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Role struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ROLE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.roleId = iprot.readString();
              struct.setRoleIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COMPANY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.companyId = iprot.readString();
              struct.setCompanyIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ROLE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.roleName = iprot.readString();
              struct.setRoleNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ROLE_PERMISSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.rolePermission = iprot.readString();
              struct.setRolePermissionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ROLE_PHONE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.rolePhone = iprot.readString();
              struct.setRolePhoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ROLE_PASSWORD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.rolePassword = iprot.readString();
              struct.setRolePasswordIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Role struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.roleId != null) {
        oprot.writeFieldBegin(ROLE_ID_FIELD_DESC);
        oprot.writeString(struct.roleId);
        oprot.writeFieldEnd();
      }
      if (struct.companyId != null) {
        oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
        oprot.writeString(struct.companyId);
        oprot.writeFieldEnd();
      }
      if (struct.roleName != null) {
        oprot.writeFieldBegin(ROLE_NAME_FIELD_DESC);
        oprot.writeString(struct.roleName);
        oprot.writeFieldEnd();
      }
      if (struct.rolePermission != null) {
        oprot.writeFieldBegin(ROLE_PERMISSION_FIELD_DESC);
        oprot.writeString(struct.rolePermission);
        oprot.writeFieldEnd();
      }
      if (struct.rolePhone != null) {
        oprot.writeFieldBegin(ROLE_PHONE_FIELD_DESC);
        oprot.writeString(struct.rolePhone);
        oprot.writeFieldEnd();
      }
      if (struct.rolePassword != null) {
        oprot.writeFieldBegin(ROLE_PASSWORD_FIELD_DESC);
        oprot.writeString(struct.rolePassword);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RoleTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public RoleTupleScheme getScheme() {
      return new RoleTupleScheme();
    }
  }

  private static class RoleTupleScheme extends org.apache.thrift.scheme.TupleScheme<Role> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Role struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetRoleId()) {
        optionals.set(0);
      }
      if (struct.isSetCompanyId()) {
        optionals.set(1);
      }
      if (struct.isSetRoleName()) {
        optionals.set(2);
      }
      if (struct.isSetRolePermission()) {
        optionals.set(3);
      }
      if (struct.isSetRolePhone()) {
        optionals.set(4);
      }
      if (struct.isSetRolePassword()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetRoleId()) {
        oprot.writeString(struct.roleId);
      }
      if (struct.isSetCompanyId()) {
        oprot.writeString(struct.companyId);
      }
      if (struct.isSetRoleName()) {
        oprot.writeString(struct.roleName);
      }
      if (struct.isSetRolePermission()) {
        oprot.writeString(struct.rolePermission);
      }
      if (struct.isSetRolePhone()) {
        oprot.writeString(struct.rolePhone);
      }
      if (struct.isSetRolePassword()) {
        oprot.writeString(struct.rolePassword);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Role struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.roleId = iprot.readString();
        struct.setRoleIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.companyId = iprot.readString();
        struct.setCompanyIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.roleName = iprot.readString();
        struct.setRoleNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.rolePermission = iprot.readString();
        struct.setRolePermissionIsSet(true);
      }
      if (incoming.get(4)) {
        struct.rolePhone = iprot.readString();
        struct.setRolePhoneIsSet(true);
      }
      if (incoming.get(5)) {
        struct.rolePassword = iprot.readString();
        struct.setRolePasswordIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

